(self.webpackChunkauto_infra=self.webpackChunkauto_infra||[]).push([[655],{3905:(e,t,r)=>{"use strict";r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=u(r),d=a,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||s;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8105:(e,t,r)=>{"use strict";r.r(t),r.d(t,{frontMatter:()=>s,contentTitle:()=>o,metadata:()=>i,toc:()=>l,default:()=>p});var n=r(2122),a=(r(7294),r(3905));const s={slug:"RestAssuredExtent",title:"Advanced RestAssured Logging in Extent Report",author:"Bhargav Murari",author_title:"Automation Test Engineer @Kongsberg Digital",tags:["Selenium","Java","Reporting"],draft:!1},o=void 0,i={unversionedId:"Articles/2019-06-06-RestAssured_ExtentLogging",id:"Articles/2019-06-06-RestAssured_ExtentLogging",isDocsHomePage:!1,title:"Advanced RestAssured Logging in Extent Report",description:"image",source:"@site/docs/Articles/2019-06-06-RestAssured_ExtentLogging.mdx",sourceDirName:"Articles",slug:"/Articles/RestAssuredExtent",permalink:"/docs/Articles/RestAssuredExtent",version:"current",frontMatter:{slug:"RestAssuredExtent",title:"Advanced RestAssured Logging in Extent Report",author:"Bhargav Murari",author_title:"Automation Test Engineer @Kongsberg Digital",tags:["Selenium","Java","Reporting"],draft:!1},sidebar:"tutorialSidebar",previous:{title:"Advanced RestAssured Logging in Allure Report",permalink:"/docs/Articles/RestAssuredAllure"},next:{title:"Deploy Reportportal on Azure Kubernetes Cluster",permalink:"/docs/Articles/ReportPortalKubernetes"}},l=[],u={toc:l};function p({components:e,...t}){return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:r(155).Z})),(0,a.kt)("p",null,"Goal: Record API Request and Response using RestAssured Logging with Minimal Coding, By Decreasing the Boiler Plate code for Reporting Purposes.\nLibraries in Use:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"RestAssured"),(0,a.kt)("li",{parentName:"ol"},"ExtentReports"),(0,a.kt)("li",{parentName:"ol"},"TestNG")),(0,a.kt)("p",null,"Step1: Create a ExtentReport Class for ExtentSparkReporter class initialization."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},'public class ExtentReporterCls {\n    static ExtentReports extent;\n\n    public static ExtentReports ReportGenerator()\n    {\n        Date d = new Date();\n        SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MMM-dd_HH_mm");\n\n        String path = System.getProperty("user.dir")+"\\\\HtmlReports\\\\Extent\\\\"+"ExtentReport.html";\n\n        ExtentSparkReporter ESR = new ExtentSparkReporter(path).viewConfigurer()\n                .viewOrder()\n                .as(new ViewName[] { ViewName.DASHBOARD, ViewName.TEST, ViewName.EXCEPTION,ViewName.LOG  })\n                .apply();\n        ESR.config().setReportName("Test Automation Results");\n       // ESR.config().setDocumentTitle("Test Results");\n        extent = new ExtentReports();\n        extent.attachReporter(ESR);\n        extent.setSystemInfo("Tester",System.getProperty("user.name"));\n        return extent;\n\n    }\n\n}\n')),(0,a.kt)("p",null,"Step2: Create a TestNG Listener Class as Below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},'public class ExtentListener implements ITestListener, ISuiteListener {\n    ExtentReports extent = ExtentReporterCls.ReportGenerator();\n    ExtentTest test;\n    ExtentTest node;\n    private ByteArrayOutputStream request = new ByteArrayOutputStream();\n    private  ByteArrayOutputStream response = new ByteArrayOutputStream();\n    private PrintStream requestVar = new PrintStream(request,true);\n    private PrintStream responseVar = new PrintStream(response,true);\n\n    private static final ThreadLocal<ExtentTest> LocalThread = new ThreadLocal<ExtentTest>();\n\n    public void logInfo(String message)\n    {\n        LocalThread.get().info(message);\n    }\n\n    public void logJsoninfo(String json)\n    {\n        LocalThread.get().info(MarkupHelper.createCodeBlock(json, CodeLanguage.JSON));\n    }\n\n    public void logReqAndResponse(String json1,String json2)\n    {\n        LocalThread.get().info(MarkupHelper.createCodeBlocks(new String[]{json1, json2}));\n    }\n\n    @Override\n    public void onTestStart(ITestResult result) {\n        node = test.createNode(result.getMethod().getMethodName());\n        LocalThread.set(node);\n    }\n\n    @Override\n    public void onTestSuccess(ITestResult result) {\n        LocalThread.get().log(Status.PASS,"------------TEST CASE PASSED------------");\n        LocalThread.get().info(MarkupHelper.createCodeBlocks(new String[]{request.toString().trim(),response.toString().trim()}));\n    }\n\n    @Override\n    public void onTestFailure(ITestResult result) {\n        LocalThread.get().info(MarkupHelper.createCodeBlocks(new String[]{request.toString().trim(), response.toString().trim()}));\n        LocalThread.get().fail(result.getThrowable());\n    }\n\n    @Override\n    public void onTestSkipped(ITestResult result) {\n        LocalThread.get().log(Status.INFO,"------------TEST CASE SKIPPED------------");\n        LocalThread.get().skip(result.getThrowable());\n\n    }\n\n    @Override\n    public void onStart(ITestContext context) {\n\n        RestAssured.filters(new RequestLoggingFilter(LogDetail.ALL,requestVar),new ResponseLoggingFilter(LogDetail.ALL,responseVar));\n        test= extent.createTest(context.getName());\n    }\n\n    @SneakyThrows\n    @Override\n    public void onFinish(ITestContext context) {\n        extent.flush();\n    }\n}\n')),(0,a.kt)("p",null,"From the above TestNG Listener class we are initializing two types of Variables.\nByteArrayOutPutStream\nPrintArrayStream"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"    private ByteArrayOutputStream request = new ByteArrayOutputStream();\n    private  ByteArrayOutputStream response = new ByteArrayOutputStream();\n    private PrintStream requestVar = new PrintStream(request,true);\n    private PrintStream responseVar = new PrintStream(response,true);\n")),(0,a.kt)("p",null,"And in OnStart Method we are defining the RestAssured LoggingLevel. by Using RestAssured.Filters and RequestLoggingFiler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"}," public void onStart(ITestContext context) {\n\n        RestAssured.filters(new RequestLoggingFilter(LogDetail.ALL,requestVar),new ResponseLoggingFilter(LogDetail.ALL,responseVar));\n        test= extent.createTest(context.getName());\n    }\n\n")),(0,a.kt)("p",null,"Add the Above Listener to your TestNG xml and check the Report. Your Report will look like below."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:r(4133).Z})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:r(8468).Z})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:r(6117).Z})))}p.isMDXComponent=!0},155:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=r.p+"assets/images/1-3a0fedf67ea3b974f5d2b77daf589a31.png"},4133:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=r.p+"assets/images/2-9eff194188b171cfe8710b7eba026ec6.png"},8468:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=r.p+"assets/images/3-e87199719fa5b4eabb441032e18230b9.png"},6117:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n=r.p+"assets/images/4-2259ca28f46a3ac761f06718b3f70f81.png"}}]);